#!/bin/ksh
#
# author: dukun@taobao.com
# for JULY
# 

## 脚本常量定义部分


# 定义错误码---------------------------------
typeset -irx ERROR_CODE_SUCCESSED=0;      # 成功
typeset -irx ERROR_CODE_CHECK_ARGS=1;     # CMD参数错误
typeset -irx ERROR_CODE_PARSE_CONF=2;     # 配置文件解析错误
typeset -irx ERROR_CODE_CONF_NOT_FOUND=3; # 配置文件未找到
# -----------------------------------------

# 定义输出格式字符-------------------
typeset -r COLUMN_BEGIN_CHAR="+";# 列开头拐角字符
typeset -r COLUMN_FILLW_CHAR="-";# 列宽度填充字符
typeset -r COLUMN_FILLH_CHAR="|";# 列高度填充字符
typeset -r COLUMN_SPLIT_CHAR="/";# 列同列分隔字符
# --------------------------------

# HostProfile的目录文件结构定义----------------------------
typeset HP_HOME_DIR="$HOME/.hp";                      # 主目录，里面存放配置和临时文件
typeset HP_TEMP_DIR="$HP_HOME_DIR/temp";              # 临时文件存放目录
typeset HP_SHEL_FILE="$HP_TEMP_DIR/profile_$$.shell"; # 批量脚本profile临时脚本
typeset HP_CONF_FILE="$HOME/.hp/default.hp";          # 默认配置文件存放地址
# -----------------------------------------------------


# 配置文件解析定义---------------------------------------------------------------
# CONF配置文件解析结果
typeset PROFILE_CONF="";
# 用于分隔列解析出来的数据
typeset PROFILE_CONF_SPLIT="DUKUN@TAOBAO.COM@HP";
# 列配置项中必填部分
typeset PROFILE_CONF_NOT_NULLS=".idx,.lab,.wid,.cmd,.dsc";
# 列配置项中选填部分
typeset PROFILE_CONF_NULLS=".lmt.up,.lmt.dw,.lmt.rx,.info.color,.warn.color";
# ----------------------------------------------------------------------------


# 输出控制定义------------------------
typeset PROFILE_HOST_LIST="";     # 存放需要被循环监控的主机列表
typeset PRINT_HEADER_EACH_LINE=40;# 每输出多少行数据打印一次列头
typeset PRINT_LINE_COUNTER=0;     # 输出行计数器
typeset -i REPEAT_TIMES=0;        # 命令重复执行次数,0次表示无限重复
# ---------------------------------




## 脚本代码开始部分

# 解析并且校验CONF配置文件，如果配置文件解析失败则直接退出
# 输出格式顺序 ID,IDX,LAB,WID,CMD,DSC,LMT.UP,LMT.DW,LMT.RX
function prase_profile_conf_file
{
	# 解析配置文件
	PROFILE_CONF=$(
		awk '/^[^#][^\.]+\.[^=]+=.*/{
			i=index($0,"=");
			id=key=substr($0,0,i-1);
			val=substr($0,i+1);
			gsub(/\..*/,"",id);
			m[key]=val;
			ids[id]=ids[id]+1;
		}END{
			not_null_len=split(nn_cols,not_nulls,",");
			null_len=split(n_cols,nulls,",");
			for(id in ids) {
				if(!checkNotNull())continue;
				printf("%s%s",id,cs);
				for(idx=1;idx<=not_null_len;printf("%s%s",m[id not_nulls[idx++]],cs));
				for(idx=1;idx<=null_len;printf("%s%s",m[id nulls[idx++]],cs));
				print "";
			}
		} function checkNotNull(){
			# 校验必选项是否都已填写
			for(idx in not_nulls){
				if(!m[id not_nulls[idx]])
					return 0;
			}
			return 1;
		}'	cs=${PROFILE_CONF_SPLIT} \
			nn_cols=${PROFILE_CONF_NOT_NULLS} \
			n_cols=${PROFILE_CONF_NULLS} \
			${HP_CONF_FILE}
	);
	#检查配置文件是否合法，如果不合法直接退出
	if [[ -z $PROFILE_CONF ]]; then
		echo "非法的配置文件，请核对!";
		exit $ERROR_CODE_PARSE_CONF;
	fi
}


# 构造监控执行脚本
function build_profile_shell
{
	#typeset local HP_TODAY=$(date +%Y-%m-%d);
	typeset local HP_YESTERDAY=$(date +%Y-%m-%d --date=yesterday);
	echo "export HP_TODAY=$HP_TODAY" >> $HP_SHEL_FILE;
	echo "export HP_YESTERDAY=$HP_YESTERDAY" >> $HP_SHEL_FILE;
	echo "$PROFILE_CONF"|awk -F "$PROFILE_CONF_SPLIT" '{
		printf("%s|xargs -I{} echo \"%s.val=\"{}\n",$5,$1);
	}' >> "$HP_SHEL_FILE"
}


# 输出帮助信息
function show_help
{
	print "
例子: 
	hp -h
	echo 172.24.24.92|hp
	echo 172.24.24.92|hp -r 1
	echo 172.24.24.92|hp -r 1 -f ic.default
参数:
	-h, --help :
		输出帮助说明!
	-r, --repeat :
		设置重复次数，默认是无限循环
	-f, --file :
		获取配置文件，如果不指定则用默认的
列定义:"
	echo "$PROFILE_CONF"|awk -F"$PROFILE_CONF_SPLIT" '{
		id=$1;
		ids[id]=1;
		cols_len=split(nn_cols","n_cols,cols,",");
		for(i=1;i<=cols_len;i++){
			m[id cols[i]]=$(i+1);
		}
	} END{
		sort_ids(sortids,ids);
		for(ii=1;ii<=slen;ii++){
			id=sortids[tA[ii]];
			printf("\033[31m%10s\033[0m : %s\n",m[id".lab"],m[id".dsc"]);
		}
	} function sort_ids(sortids,ids) {
		# 根据列的idx对列进行排序
		for( id in ids ) {
			sortids[m[id".idx"]]=id;
		}
		slen=asorti(sortids,tA);
	}'	nn_cols="$PROFILE_CONF_NOT_NULLS"  \
		n_cols="$PROFILE_CONF_NULLS"
	
}

# 脚本结束清理
function finish
{
	rm -f "$HP_SHEL_FILE";
}

# 轮询监控主机
# 这段awk脚本写得够呛...懒得维护了
function profile
{
	echo "$PROFILE_HOST_LIST"|while read host;
	do
		typeset local profile_vals=$(
				cat "$HP_SHEL_FILE"|xssh -i $host\
				|awk '/\.val=/{print $0"\n"}';
		);
		
		typeset local merge=$(
			echo "$PROFILE_CONF";
			echo "$profile_vals";
		);
		
		echo "$merge"|awk -F"$PROFILE_CONF_SPLIT" '/^.+$/{
			if(NF==1){
				# 处理val
				i=index($0,"=");
				m[substr($0,0,i-1)]=substr($0,i+1);
			} else {
				# 处理行
				id=$1;
				ids[id]=1;
				cols_len=split(nn_cols","n_cols,cols,",");
				for(i=1;i<=cols_len;i++){
					m[id cols[i]]=$(i+1);
				}
			}
		}END{
			sort_ids(sortids,ids);
			if(!(line_counter%each_line)) {
				print_header();
			}
			print_context();
		} function info(msg,color) {
			# 输出正常信息
			return "\033["(color?color:32)"m"(msg?msg:"-")"\033[0m";
		} function warn(msg,color) {
			# 输出警告信息
			return "\033["(color?color:31)"m"(msg?msg:"-")"\033[0m";
		} function sort_ids(sortids,ids) {
			# 根据列的idx对列进行排序
			for( id in ids ) {
				sortids[m[id".idx"]]=id;
			}
			slen=asorti(sortids,tA);
		} function is_merge_column(idx) {
			# 判断是否是和并列
			return (idx~/^[^\-]*\-[^-]*$/);
		} function is_need_commit_column(idx,col_idx,col_len){
			# 判断是否需要提交当前合并列
			# 如果当前列是未列,则需要提交
			if(col_idx==col_len) {
				return 1;
			}
			
			# 检查当前列是否是和并列，如果不是则直接提交
			if(!is_merge_column(idx)) {
				return 1;
			}
			
			# 取得下一列序列
			next_id=sortids[tA[ii+1]];
			next_idx=m[next_id".idx"];
			
			# 检查下一列是否符合xx-yy的格式,不符合则表明当前列需要提交
			if(!is_merge_column(next_idx)) return 1;

			# 判断当前列和下一列是否同属于一个和并列
			# 如果不属于则表明需要提交
			split(next_idx,pfidxA,"-");
			prefix_next_idx=pfidxA[1];
			split(idx,pfidxA,"-");
			prefix_idx=pfidxA[1];
			if(prefix_next_idx!=prefix_idx) {
				return 1;
			}
			
			# 其他情况可以认为不需要提交和并列，继续合并
			return 0;
		} function strcmp(stra,strb,_ARGVEND_,i,lena,lenb,mlen) {
			# 参照C语言中的strcmp函数
			lena=length(stra);
			lenb=length(strb);
			mlen=lena<lenb?lena:lenb;
			for(i=1;i<=mlen;i++) {
				if( substr(stra,i,1)!=substr(strb,i,1)) {
					return i;
				}
			}
			return mlen;
		} function print_header() {
			# 清理合并标记
			mcol="";mwid=0;mc=0;
			# 输出列信息
			col="";
			for(ii=1;ii<=slen;ii++){
				id=sortids[tA[ii]];
				idx=m[id".idx"];
				
				# 合并列头部
				# -----------------------------------------
				if( is_need_commit_column(idx,ii,slen) ) {
					# 需要提交提交列
					if(is_merge_column(idx)) {
						# 提交和并列
						merge_column_ids[mc++]=id;
						for(imc=0;imc<mc;imc++){
							mid=merge_column_ids[imc];
							mlab=m[mid".lab"];
							# 合并mlab和lab中相同的字符
							mlab_dif=strcmp(mcol,mlab);
							mcol=mcol (mcol?cstc:"");
							mcol=mcol substr(mlab,mlab_dif);
							mwid=mwid+m[mid".wid"];
						}
						scol=cbnc mcol;wid=mwid;
						# 清理合并标记
						mcol="";mwid=0;mc=0;
					} else {
						# 提交普通列
						scol=cbnc m[id".lab"];
						wid=m[id".wid"];
					}
				} else {
					# 记录下需要合并的列
					merge_column_ids[mc++]=id;
					continue;
				}
				# -----------------------------------------
				
				len=length(scol);
				for(i=0;i<wid-len;i++) {
					scol=scol cfwc;
				}
				col=col scol;
			}
			print col;
		} function format_value(id) {
			# 格式化输出值
			msg="";
			val=m[id".val"];
			up=m[id".lmt.up"];
			dw=m[id".lmt.dw"];
			rx=m[id".lmt.rx"];
			iic=m[id".info.color"];
			iwc=m[id".warn.color"];
			if(rx) {
				# 启用增则表达式判断
				msg=(val~rx)?warn(val,iwc):info(val,iic);
			} else if(!msg&&up) {
				upval=up;
				# 启用上限判断,如果up的值不是数字则认为是列变量
				if(up!~/^[0-9]*\.?[0-9]*$/){
					upval=m[up".val"];
				}
				msg=(upval&&(val+0)<=(upval+0))?info(val,iic):warn(val,iwc);
			} else if(!msg&&dw) {
				# 启用下限判断,如果dw的值不是数字则认为是列变量
				if(dw!~/^[0-9]*\.?[0-9]*$/){
					dwval=m[dw".val"];
				}
				msg=(dwval&&(val+0)>=(dwval+0))?info(val,iic):warn(val,iwc);
			} else {
				msg=info(val,iic);
			}
			return msg;
		} function print_context() {
			# 清理合并标记
			mmsg="";mwid=0;mc=0;
			# 输出数值
			for(ii=1;ii<=slen;ii++){
				id=sortids[tA[ii]];
				idx=m[id".idx"];
				
				# 合并列输出值
				# -----------------------------------------
				if( is_need_commit_column(idx,ii,slen) ) {
					if(is_merge_column(idx)) {
						merge_column_ids[mc++]=id;
						for(imc=0;imc<mc;imc++){
							mid=merge_column_ids[imc];
							mmsg=mmsg (mmsg?cstc:"");
							mmsg=mmsg format_value(mid);
							# 9:8的意思是要补偿一位/符
							mwid=mwid+m[mid".wid"]+(imc<mc-1?9:8);
						}
						msg=mmsg;wid=mwid;
						mmsg="";mwid=0;mc=0;
					} else {
						msg=format_value(id);
						wid=m[id".wid"]+8;
					}
				} else {
					merge_column_ids[mc++]=id;
					continue;
				}
				# -----------------------------------------
				
				fmt=sprintf("%s%%-%ds",cfhc,wid);
				line=line sprintf(fmt,msg);
			}
			print line;
		}'	cbnc="$COLUMN_BEGIN_CHAR" \
			cfwc="$COLUMN_FILLW_CHAR" \
			cfhc="$COLUMN_FILLH_CHAR" \
			cstc="$COLUMN_SPLIT_CHAR" \
			line_counter="$PRINT_LINE_COUNTER" \
			each_line="$PRINT_HEADER_EACH_LINE"\
			nn_cols="$PROFILE_CONF_NOT_NULLS"  \
			n_cols="$PROFILE_CONF_NULLS"
		PRINT_LINE_COUNTER=$(($PRINT_LINE_COUNTER+1));
	done;
}

# 重复执行轮询监控主机
function repeat_profile
{
	
	# 获取主机列表
	while read host;do
		PROFILE_HOST_LIST=$(
			echo $host\
				|awk '{printf("%s\n%s",hosts,$0)}' hosts="$PROFILE_HOST_LIST"\
				|grep -vE ^$
		);
	done;

	# 设置执行次数
	typeset -i times=$(($REPEAT_TIMES));
	while true;
	do
		profile;
		times=$(($times-1));
		[[ 0 -lt $REPEAT_TIMES && 0 -eq $times ]]&&break;
	done;
}


# 脚本初始化
function init
{
	# 初始化文件夹
	mkdir -p "$HP_HOME_DIR";
	mkdir -p "$HP_TEMP_DIR";
	if [[ ! -f "$HP_CONF_FILE" ]];then
		echo "无法找到配置文件:$HP_CONF_FILE";
		exit "$ERROR_CODE_CONF_NOT_FOUND";
	fi

	# 解析配置文件
	prase_profile_conf_file;

	# 构造监控脚本
	build_profile_shell;
	
}

# 主程序开始
function main
{

	# 解析命令行传来的参数
	while getopts hr:f: OPTION
	do
		case "$OPTION" in
			h)
				init;
				show_help;
				exit;
			;;
			f)
				HP_CONF_FILE="$OPTARG";
			;;
			r)
				REPEAT_TIMES="$OPTARG";
			;;
			\?)
				show_help;
				exit "$ERROR_CODE_CHECK_ARGS"
			;;
		esac
	done

	init;
	repeat_profile;
	finish;
}

# 捕捉CTRL+C信号
trap "finish" SIGINT
main "$@";

exit $ERROR_CODE_SUCCESSED;
